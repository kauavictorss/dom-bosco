-- Supabase Schema for Dom Bosco Project - V2
-- Generated by Cascade
-- Last Updated: 2025-07-28

-- Tabela para gerenciar cargos/funções (papeis)
CREATE TABLE roles (
    id TEXT PRIMARY KEY,                                 -- Identificador único do cargo (ex: 'psychologist', 'custom_role_1')
    name TEXT NOT NULL UNIQUE,                           -- Nome de exibição do cargo (ex: 'Psicólogo(a)', 'Coordenador Chefe')
    tab_access JSONB,                                    -- Permissões de acesso padrão para este cargo. Ex: {"agenda": "edit"}
    is_custom BOOLEAN DEFAULT TRUE,                      -- Flag para diferenciar roles padrão de roles criadas pelo usuário
    created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE roles IS 'Armazena cargos e suas permissões de acesso. Inclui tanto cargos padrão quanto personalizados.';

-- Tabela para funcionários
CREATE TABLE funcionarios (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    email TEXT UNIQUE NOT NULL,
    password TEXT NOT NULL,                              -- IMPORTANTE: Armazenar sempre como hash seguro (ex: via Supabase Auth)
    role_id TEXT REFERENCES roles(id),                   -- Chave estrangeira para o cargo do funcionário
    unit TEXT,                                           -- Unidade de trabalho (ex: 'madre', 'floresta')
    phone TEXT,
    address TEXT,
    cpf TEXT UNIQUE,
    rg TEXT,
    birth_date DATE,
    admission_date DATE,
    specialization TEXT,
    professional_id TEXT,                                -- ID profissional (ex: CRP, CREFITO)
    bank_details JSONB,                                  -- Ex: {"banco": "Nome", "agencia": "1234", "conta": "56789-0"}
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE funcionarios IS 'Dados cadastrais dos funcionários e profissionais.';

-- Tabela para clientes (pacientes)
CREATE TABLE clientes (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL,
    birth_date DATE,
    cpf TEXT UNIQUE,
    rg TEXT,
    gender TEXT,
    school TEXT,
    school_contact TEXT,
    grade TEXT,
    responsible_name TEXT NOT NULL,
    responsible_phone TEXT NOT NULL,
    responsible_email TEXT,
    responsible_kinship TEXT,
    address TEXT,
    diagnosis TEXT,
    medication TEXT,
    health_plan TEXT,
    health_plan_id TEXT,
    unit TEXT NOT NULL,                                  -- Unidade de atendimento (ex: 'madre', 'floresta')
    is_active BOOLEAN DEFAULT TRUE,
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE clientes IS 'Dados cadastrais dos clientes/pacientes.';

-- Tabela de junção para associar múltiplos profissionais a múltiplos clientes
CREATE TABLE clientes_profissionais (
    cliente_id INTEGER REFERENCES clientes(id) ON DELETE CASCADE,
    funcionario_id INTEGER REFERENCES funcionarios(id) ON DELETE CASCADE,
    PRIMARY KEY (cliente_id, funcionario_id)
);
COMMENT ON TABLE clientes_profissionais IS 'Tabela de associação N-para-N entre clientes e profissionais (funcionários).';

-- Tabela para agendamentos
CREATE TABLE agendamentos (
    id SERIAL PRIMARY KEY,
    cliente_id INTEGER NOT NULL REFERENCES clientes(id),
    funcionario_id INTEGER NOT NULL REFERENCES funcionarios(id),
    start_time TIMESTAMPTZ NOT NULL,                     -- Data e hora de início do agendamento
    end_time TIMESTAMPTZ NOT NULL,                       -- Data e hora de término
    service_type TEXT,                                   -- Tipo de serviço (ex: 'Consulta', 'Sessão de Terapia')
    status TEXT NOT NULL DEFAULT 'agendado',             -- Status: 'agendado', 'confirmado', 'cancelado', 'realizado', 'falta'
    valor NUMERIC(10, 2),                                -- Valor do atendimento
    payment_status TEXT DEFAULT 'pendente',              -- Status do pagamento: 'pendente', 'pago', 'parcial'
    notes TEXT,                                          -- Observações sobre o agendamento
    created_by INTEGER REFERENCES funcionarios(id),
    created_at TIMESTAMPTZ DEFAULT NOW(),
    updated_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE agendamentos IS 'Registra todos os agendamentos, seus status e detalhes financeiros.';

-- Tabela para transações financeiras
CREATE TABLE transacoes_financeiras (
    id SERIAL PRIMARY KEY,
    description TEXT NOT NULL,
    type TEXT NOT NULL,                                  -- 'receita' ou 'despesa'
    amount NUMERIC(10, 2) NOT NULL,
    transaction_date DATE NOT NULL DEFAULT CURRENT_DATE,
    agendamento_id INTEGER REFERENCES agendamentos(id),  -- Link opcional para um agendamento
    funcionario_id INTEGER REFERENCES funcionarios(id),  -- Link opcional para um funcionário (ex: salário)
    notes TEXT,
    created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE transacoes_financeiras IS 'Centraliza todas as receitas e despesas da clínica.';

-- Tabela para o Mural do Coordenador
CREATE TABLE mural (
    id SERIAL PRIMARY KEY,
    title TEXT NOT NULL,
    content TEXT,
    type TEXT NOT NULL,                                  -- 'nota', 'documento', 'reuniao'
    created_by INTEGER NOT NULL REFERENCES funcionarios(id),
    meta_data JSONB,                                     -- Para dados extras, ex: {"file_url": "..."} ou {"meeting_time": "..."}
    created_at TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE mural IS 'Conteúdo para o Mural do Coordenador (notas, documentos, reuniões).';

-- Tabela para itens de estoque
CREATE TABLE estoque (
    id SERIAL PRIMARY KEY,
    name TEXT NOT NULL UNIQUE,
    description TEXT,
    quantity INTEGER NOT NULL DEFAULT 0,
    min_stock_level INTEGER DEFAULT 0,                   -- Nível mínimo para alerta
    unit_of_measure TEXT,                                -- Unidade (ex: 'unidade', 'caixa', 'pacote')
    last_updated TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE estoque IS 'Catálogo de itens em estoque.';

-- Tabela para movimentações de estoque
CREATE TABLE movimentacoes_estoque (
    id SERIAL PRIMARY KEY,
    item_id INTEGER NOT NULL REFERENCES estoque(id),
    type TEXT NOT NULL,                                  -- 'entrada' ou 'saida'
    quantity INTEGER NOT NULL,
    reason TEXT,                                         -- Motivo (ex: 'Compra', 'Uso em atendimento', 'Ajuste')
    agendamento_id INTEGER REFERENCES agendamentos(id),  -- Link opcional para o atendimento que usou o material
    funcionario_id INTEGER NOT NULL REFERENCES funcionarios(id),
    movement_date TIMESTAMPTZ DEFAULT NOW()
);
COMMENT ON TABLE movimentacoes_estoque IS 'Histórico de todas as entradas e saídas de itens do estoque.';
